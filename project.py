# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PVzkY0UqcrePMijZtyy8Jr76bN9LNnzd
"""

!unzip /content/drive/MyDrive/project/split_dataset30.zip

import cv2
import json
import os
import glob

# 폴더 경로 설정
base_folder = "/content/split_dataset30/validation"  # 기본 작업 폴더 경로
image_folder = os.path.join(base_folder, "images")  # 원본 이미지 파일 폴더 경로
json_folder = os.path.join(base_folder, "labels")  # 원본 JSON 파일 폴더 경로
output_image_folder = os.path.join(base_folder, "resized_images")  # 리사이즈된 이미지 저장 폴더 경로
output_txt_folder = os.path.join(base_folder, "yolo_labels")  # YOLO 형식의 레이블 텍스트 파일 저장 폴더 경로

# 출력 폴더가 없으면 생성
os.makedirs(output_image_folder, exist_ok=True)
os.makedirs(output_txt_folder, exist_ok=True)

# 이미지와 JSON 파일을 처리
for image_path in glob.glob(os.path.join(image_folder, "*.jpg")):
    # 이미지 파일명에서 확장자를 제거하여 JSON 경로 생성
    base_name = os.path.splitext(os.path.basename(image_path))[0]
    json_path = os.path.join(json_folder, f"{base_name}.json")

    # JSON 파일이 존재하는지 확인하고 처리
    if os.path.exists(json_path):
        # 원본 이미지 읽기
        image = cv2.imread(image_path)
        if image is None:
            print(f"Error: Could not read image {image_path}")
            continue
        original_height, original_width = image.shape[:2]

        # 640x640으로 이미지 리사이즈 및 저장
        resized_image = cv2.resize(image, (640, 640))
        resized_image_path = os.path.join(output_image_folder, f"{base_name}.jpg")
        cv2.imwrite(resized_image_path, resized_image)

        # JSON 파일에서 객체 정보 읽기
        with open(json_path, "r") as f:
            data = json.load(f)

        # YOLO 형식의 레이블 텍스트 작성 (리사이즈된 이미지 기준)
        yolo_labels = []

        # segmentation이 있는 경우 처리
        if "segmentation" in data:
            for obj in data["segmentation"]:
                if "polygon" in obj:
                    polygon = obj["polygon"]
                    x_coords = [point[0] for point in polygon]
                    y_coords = [point[1] for point in polygon]

                    # Bounding box 계산
                    x_min, x_max = min(x_coords), max(x_coords)
                    y_min, y_max = min(y_coords), max(y_coords)

                    # 리사이즈된 이미지 기준으로 bbox 변환
                    x_min_resized = x_min * 640 / original_width
                    y_min_resized = y_min * 640 / original_height
                    x_max_resized = x_max * 640 / original_width
                    y_max_resized = y_max * 640 / original_height

                    # YOLO 형식에 맞게 변환 (정규화된 값으로 계산)
                    center_x = (x_min_resized + x_max_resized) / 2 / 640
                    center_y = (y_min_resized + y_max_resized) / 2 / 640
                    bbox_width = (x_max_resized - x_min_resized) / 640
                    bbox_height = (y_max_resized - y_min_resized) / 640

                    # 클래스 ID는 예시로 0 사용 (YOLO는 클래스 ID 필요)
                    class_id = 0
                    yolo_labels.append(
                        f"{class_id} {center_x:.6f} {center_y:.6f} {bbox_width:.6f} {bbox_height:.6f}"
                    )

                    # 기존 JSON 데이터의 bbox 업데이트
                    obj["bbox"] = [x_min_resized, y_min_resized, x_max_resized - x_min_resized, y_max_resized - y_min_resized]
                    # segmentation 데이터 삭제
                    del obj["polygon"]

        # bbox2d가 있는 경우 처리
        if "bbox2d" in data:
            for obj in data["bbox2d"]:
                if "bbox" in obj:
                    x_min, y_min, x_max, y_max = obj["bbox"]

                    # 리사이즈된 이미지 기준으로 bbox 변환
                    x_min_resized = x_min * 640 / original_width
                    y_min_resized = y_min * 640 / original_height
                    x_max_resized = x_max * 640 / original_width
                    y_max_resized = y_max * 640 / original_height

                    # YOLO 형식에 맞게 변환 (정규화된 값으로 계산)
                    center_x = (x_min_resized + x_max_resized) / 2 / 640
                    center_y = (y_min_resized + y_max_resized) / 2 / 640
                    bbox_width = (x_max_resized - x_min_resized) / 640
                    bbox_height = (y_max_resized - y_min_resized) / 640

                    # 클래스 ID는 예시로 0 사용
                    class_id = 0
                    yolo_labels.append(
                        f"{class_id} {center_x:.6f} {center_y:.6f} {bbox_width:.6f} {bbox_height:.6f}"
                    )

                    # JSON 데이터의 bbox 업데이트
                    obj["bbox"] = [x_min_resized, y_min_resized, x_max_resized - x_min_resized, y_max_resized - y_min_resized]

        # YOLO 텍스트 파일 저장
        output_txt_path = os.path.join(output_txt_folder, f"{base_name}.txt")
        with open(output_txt_path, "w") as txt_file:
            txt_file.write("\n".join(yolo_labels))

        # 리사이즈된 bbox로 JSON 파일 저장
        resized_json_path = os.path.join(json_folder, f"{base_name}_resized.json")
        with open(resized_json_path, "w") as f:
            json.dump(data, f, indent=4)



!unzip /content/drive/MyDrive/project/pamugas.v1i.yolov5pytorch.zip

import os
import shutil

# 이미지 폴더 경로 설정
source_folders = [
    "/content/split_dataset30/train/yolo_labels",  # 첫 번째 이미지 폴더
    "/content/train/labels"  # 두 번째 이미지 폴더
]
destination_folder = "/content/train_merged_labels"  # 병합된 이미지를 저장할 폴더

# 대상 폴더가 없으면 생성
os.makedirs(destination_folder, exist_ok=True)

# 각 원본 폴더에서 이미지 파일을 대상 폴더로 복사
for folder in source_folders:
    for filename in os.listdir(folder):
        source_path = os.path.join(folder, filename)
        destination_path = os.path.join(destination_folder, filename)

        # 파일이 이미 존재하는 경우 덮어쓰지 않도록 확인
        if not os.path.exists(destination_path):
            shutil.copy2(source_path, destination_path)
        else:
            print(f"Warning: File '{filename}' already exists in destination. Skipping.")

print("이미지 병합이 완료되었습니다.")

!git clone https://github.com/ultralytics/yolov5.git

# Commented out IPython magic to ensure Python compatibility.
# %cd yolov5

!pip install -r requirements.txt

!pip install wandb

!python train.py --img 640 --batch 16 --epochs 100 --data /content/data.yaml --weights yolov5n.pt --name custom_yolov5n

from google.colab import drive
import shutil

# 드라이브에 저장할 폴더 경로 설정
drive_folder = '/content/drive/MyDrive/yolov5_models'  # 원하는 폴더 경로로 수정

# best.pt 파일 경로
best_model_path = '/content/yolov5/runs/train/custom_yolov5n8/weights/best.pt'

# 파일이 존재하는지 확인
if os.path.exists(best_model_path):
    # 폴더가 없다면 생성
    os.makedirs(drive_folder, exist_ok=True)

    # best.pt를 Google Drive로 이동
    shutil.copy(best_model_path, os.path.join(drive_folder, 'best.pt'))
    print(f"Model saved to {drive_folder}/best.pt")
else:
    print(f"Error: {best_model_path} not found.")

!python val.py --weights /content/yolov5/runs/train/custom_yolov5n8/weights/best.pt --data  /content/data.yaml --img 640

#resize
import cv2
image = "/content/image7.png"
image = cv2.imread(image)
image = cv2.resize(image, (640, 640))
cv2.imwrite("resized_image.png", image)
image.shape

!python detect.py --weights /content/drive/MyDrive/yolov5_models/best.pt --source /content/yolov5/resized_image.png --img 640 --conf 0.07